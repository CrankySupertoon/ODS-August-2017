# Fuck you Disyer. Stealing my fucking paypal. GET FUCKED: heapq
__about__ = 'Heap queues\n\n[explanation by Fran\xe7ois Pinard]\n\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\n\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k\', not a[k]:\n\n                                   0\n\n                  1                                 2\n\n          3               4                5               6\n\n      7       8       9       10      11      12      13      14\n\n    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30\n\n\nIn the tree above, each cell `k\' is topping `2*k+1\' and `2*k+2\'.  In\nan usual binary tournament we see in sports, each cell is the winner\nover the two cells it tops, and we can trace the winner down the tree\nto see all opponents s/he had.  However, in many computer applications\nof such tournaments, we do not need to trace the history of a winner.\nTo be more memory efficient, when a winner is promoted, we try to\nreplace it by something else at a lower level, and the rule becomes\nthat a cell and the two cells it tops contain three different items,\nbut the top cell "wins" over the two topped cells.\n\nIf this heap invariant is protected at all time, index 0 is clearly\nthe overall winner.  The simplest algorithmic way to remove it and\nfind the "next" winner is to move some loser (let\'s say cell 30 in the\ndiagram above) into the 0 position, and then percolate this new 0 down\nthe tree, exchanging values, until the invariant is re-established.\nThis is clearly logarithmic on the total number of items in the tree.\nBy iterating over all items, you get an O(n ln n) sort.\n\nA nice feature of this sort is that you can efficiently insert new\nitems while the sort is going on, provided that the inserted items are\nnot "better" than the last 0\'th element you extracted.  This is\nespecially useful in simulation contexts, where the tree holds all\nincoming events, and the "win" condition means the smallest scheduled\ntime.  When an event schedule other events for execution, they are\nscheduled into the future, so they can easily go into the heap.  So, a\nheap is a good structure for implementing schedulers (this is what I\nused for my MIDI sequencer :-).\n\nVarious structures for implementing schedulers have been extensively\nstudied, and heaps are good for this, as they are reasonably speedy,\nthe speed is almost constant, and the worst case is not much different\nthan the average case.  However, there are other representations which\nare more efficient overall, yet the worst cases might be terrible.\n\nHeaps are also very useful in big disk sorts.  You most probably all\nknow that a big sort implies producing "runs" (which are pre-sorted\nsequences, which size is usually related to the amount of CPU memory),\nfollowed by a merging passes for these runs, which merging is often\nvery cleverly organised[1].  It is very important that the initial\nsort produces the longest runs possible.  Tournaments are a good way\nto that.  If, using all the memory available to hold a tournament, you\nreplace and percolate items that happen to fit the current run, you\'ll\nproduce runs which are twice the size of the memory for random input,\nand much better for input fuzzily ordered.\n\nMoreover, if you output the 0\'th item on disk and get an input which\nmay not fit in the current tournament (because the value "wins" over\nthe last output value), it cannot fit in the heap, so the size of the\nheap decreases.  The freed memory could be cleverly reused immediately\nfor progressively building a second heap, which grows at exactly the\nsame rate the first heap is melting.  When the first heap completely\nvanishes, you switch heaps and start a new run.  Clever and quite\neffective!\n\nIn a word, heaps are useful memory structures to know.  I use them in\na few applications, and I think it is good to keep a `heap\' module\naround. :-)\n\n--------------------\n[1] The disk balancing algorithms which are current, nowadays, are\nmore annoying than clever, and this is a consequence of the seeking\ncapabilities of the disks.  On devices which cannot seek, like big\ntape drives, the story was quite different, and one had to be very\nclever to ensure (far in advance) that each tape movement will be the\nmost effective possible (that is, will best participate at\n"progressing" the merge).  Some tapes were even able to read\nbackwards, and this was also used to avoid the rewinding time.\nBelieve me, real good tape sorts were quite spectacular to watch!\nFrom all times, sorting has always been a Great Art! :-)\n'
__all__ = ['heappush',
 'heappop',
 'heapify',
 'heapreplace',
 'merge',
 'nlargest',
 'nsmallest',
 'heappushpop']
from itertools import islice, count, imap, izip, tee, chain
from operator import itemgetter

def cmp_lt(x, y):
    if hasattr(x, '__lt__'):
        return x < y
    return not y <= x


def heappush(heap, item):
    heap.append(item)
    _siftdown(heap, 0, len(heap) - 1)


def heappop(heap):
    lastelt = heap.pop()
    if heap:
        returnitem = heap[0]
        heap[0] = lastelt
        _siftup(heap, 0)
    else:
        returnitem = lastelt
    return returnitem


def heapreplace(heap, item):
    returnitem = heap[0]
    heap[0] = item
    _siftup(heap, 0)
    return returnitem


def heappushpop(heap, item):
    if heap and cmp_lt(heap[0], item):
        item, heap[0] = heap[0], item
        _siftup(heap, 0)
    return item


def heapify(x):
    n = len(x)
    for i in reversed(xrange(n // 2)):
        _siftup(x, i)


def _heappushpop_max(heap, item):
    if heap and cmp_lt(item, heap[0]):
        item, heap[0] = heap[0], item
        _siftup_max(heap, 0)
    return item


def _heapify_max(x):
    n = len(x)
    for i in reversed(range(n // 2)):
        _siftup_max(x, i)


def nlargest(n, iterable):
    if n < 0:
        return []
    it = iter(iterable)
    result = list(islice(it, n))
    if not result:
        return result
    heapify(result)
    _heappushpop = heappushpop
    for elem in it:
        _heappushpop(result, elem)

    result.sort(reverse=True)
    return result


def nsmallest(n, iterable):
    if n < 0:
        return []
    it = iter(iterable)
    result = list(islice(it, n))
    if not result:
        return result
    _heapify_max(result)
    _heappushpop = _heappushpop_max
    for elem in it:
        _heappushpop(result, elem)

    result.sort()
    return result


def _siftdown(heap, startpos, pos):
    newitem = heap[pos]
    while pos > startpos:
        parentpos = pos - 1 >> 1
        parent = heap[parentpos]
        if cmp_lt(newitem, parent):
            heap[pos] = parent
            pos = parentpos
            continue
        break

    heap[pos] = newitem


def _siftup(heap, pos):
    endpos = len(heap)
    startpos = pos
    newitem = heap[pos]
    childpos = 2 * pos + 1
    while childpos < endpos:
        rightpos = childpos + 1
        if rightpos < endpos and not cmp_lt(heap[childpos], heap[rightpos]):
            childpos = rightpos
        heap[pos] = heap[childpos]
        pos = childpos
        childpos = 2 * pos + 1

    heap[pos] = newitem
    _siftdown(heap, startpos, pos)


def _siftdown_max(heap, startpos, pos):
    newitem = heap[pos]
    while pos > startpos:
        parentpos = pos - 1 >> 1
        parent = heap[parentpos]
        if cmp_lt(parent, newitem):
            heap[pos] = parent
            pos = parentpos
            continue
        break

    heap[pos] = newitem


def _siftup_max(heap, pos):
    endpos = len(heap)
    startpos = pos
    newitem = heap[pos]
    childpos = 2 * pos + 1
    while childpos < endpos:
        rightpos = childpos + 1
        if rightpos < endpos and not cmp_lt(heap[rightpos], heap[childpos]):
            childpos = rightpos
        heap[pos] = heap[childpos]
        pos = childpos
        childpos = 2 * pos + 1

    heap[pos] = newitem
    _siftdown_max(heap, startpos, pos)


try:
    from _heapq import *
except ImportError:
    pass

def merge--- This code section failed: ---

0	LOAD_GLOBAL       'heappop'
3	LOAD_GLOBAL       'heapreplace'
6	LOAD_GLOBAL       'StopIteration'
9	ROT_THREE         None
10	ROT_TWO           None
11	STORE_FAST        '_heappop'
14	STORE_FAST        '_heapreplace'
17	STORE_FAST        '_StopIteration'

20	LOAD_GLOBAL       'len'
23	STORE_FAST        '_len'

26	BUILD_LIST_0      None
29	STORE_FAST        'h'

32	LOAD_FAST         'h'
35	LOAD_ATTR         'append'
38	STORE_FAST        'h_append'

41	SETUP_LOOP        '134'
44	LOAD_GLOBAL       'enumerate'
47	LOAD_GLOBAL       'map'
50	LOAD_GLOBAL       'iter'
53	LOAD_FAST         'iterables'
56	CALL_FUNCTION_2   None
59	CALL_FUNCTION_1   None
62	GET_ITER          None
63	FOR_ITER          '133'
66	UNPACK_SEQUENCE_2 None
69	STORE_FAST        'itnum'
72	STORE_FAST        'it'

75	SETUP_EXCEPT      '113'

78	LOAD_FAST         'it'
81	LOAD_ATTR         'next'
84	STORE_FAST        'next'

87	LOAD_FAST         'h_append'
90	LOAD_FAST         'next'
93	CALL_FUNCTION_0   None
96	LOAD_FAST         'itnum'
99	LOAD_FAST         'next'
102	BUILD_LIST_3      None
105	CALL_FUNCTION_1   None
108	POP_TOP           None
109	POP_BLOCK         None
110	JUMP_BACK         '63'
113_0	COME_FROM         '75'

113	DUP_TOP           None
114	LOAD_FAST         '_StopIteration'
117	COMPARE_OP        'exception match'
120	POP_JUMP_IF_FALSE '129'
123	POP_TOP           None
124	POP_TOP           None
125	POP_TOP           None

126	JUMP_BACK         '63'
129	END_FINALLY       None
130_0	COME_FROM         '129'
130	JUMP_BACK         '63'
133	POP_BLOCK         None
134_0	COME_FROM         '41'

134	LOAD_GLOBAL       'heapify'
137	LOAD_FAST         'h'
140	CALL_FUNCTION_1   None
143	POP_TOP           None

144	SETUP_LOOP        '264'
147	LOAD_FAST         '_len'
150	LOAD_FAST         'h'
153	CALL_FUNCTION_1   None
156	LOAD_CONST        1
159	COMPARE_OP        '>'
162	POP_JUMP_IF_FALSE '263'

165	SETUP_EXCEPT      '233'

168	SETUP_LOOP        '229'

171	LOAD_FAST         'h'
174	LOAD_CONST        0
177	BINARY_SUBSCR     None
178	DUP_TOP           None
179	UNPACK_SEQUENCE_3 None
182	STORE_FAST        'v'
185	STORE_FAST        'itnum'
188	STORE_FAST        'next'
191	STORE_FAST        's'

194	LOAD_FAST         'v'
197	YIELD_VALUE       None
198	POP_TOP           None

199	LOAD_FAST         'next'
202	CALL_FUNCTION_0   None
205	LOAD_FAST         's'
208	LOAD_CONST        0
211	STORE_SUBSCR      None

212	LOAD_FAST         '_heapreplace'
215	LOAD_FAST         'h'
218	LOAD_FAST         's'
221	CALL_FUNCTION_2   None
224	POP_TOP           None
225	JUMP_BACK         '171'
228	POP_BLOCK         None
229_0	COME_FROM         '168'
229	POP_BLOCK         None
230	JUMP_BACK         '147'
233_0	COME_FROM         '165'

233	DUP_TOP           None
234	LOAD_FAST         '_StopIteration'
237	COMPARE_OP        'exception match'
240	POP_JUMP_IF_FALSE '259'
243	POP_TOP           None
244	POP_TOP           None
245	POP_TOP           None

246	LOAD_FAST         '_heappop'
249	LOAD_FAST         'h'
252	CALL_FUNCTION_1   None
255	POP_TOP           None
256	JUMP_BACK         '147'
259	END_FINALLY       None
260_0	COME_FROM         '259'
260	JUMP_BACK         '147'
263	POP_BLOCK         None
264_0	COME_FROM         '144'

264	LOAD_FAST         'h'
267	POP_JUMP_IF_FALSE '322'

270	LOAD_FAST         'h'
273	LOAD_CONST        0
276	BINARY_SUBSCR     None
277	UNPACK_SEQUENCE_3 None
280	STORE_FAST        'v'
283	STORE_FAST        'itnum'
286	STORE_FAST        'next'

289	LOAD_FAST         'v'
292	YIELD_VALUE       None
293	POP_TOP           None

294	SETUP_LOOP        '322'
297	LOAD_FAST         'next'
300	LOAD_ATTR         '__self__'
303	GET_ITER          None
304	FOR_ITER          '318'
307	STORE_FAST        'v'

310	LOAD_FAST         'v'
313	YIELD_VALUE       None
314	POP_TOP           None
315	JUMP_BACK         '304'
318	POP_BLOCK         None
319_0	COME_FROM         '294'
319	JUMP_FORWARD      '322'
322_0	COME_FROM         '319'

Syntax error at or near `POP_BLOCK' token at offset 228


_nsmallest = nsmallest

def nsmallest(n, iterable, key = None):
    if n == 1:
        it = iter(iterable)
        head = list(islice(it, 1))
        if not head:
            return []
        if key is None:
            return [min(chain(head, it))]
        return [min(chain(head, it), key=key)]
    else:
        try:
            size = len(iterable)
        except (TypeError, AttributeError):
            pass
        else:
            if n >= size:
                return sorted(iterable, key=key)[:n]

        if key is None:
            it = izip(iterable, count())
            result = _nsmallest(n, it)
            return map(itemgetter(0), result)
        in1, in2 = tee(iterable)
        it = izip(imap(key, in1), count(), in2)
        result = _nsmallest(n, it)
        return map(itemgetter(2), result)


_nlargest = nlargest

def nlargest(n, iterable, key = None):
    if n == 1:
        it = iter(iterable)
        head = list(islice(it, 1))
        if not head:
            return []
        if key is None:
            return [max(chain(head, it))]
        return [max(chain(head, it), key=key)]
    else:
        try:
            size = len(iterable)
        except (TypeError, AttributeError):
            pass
        else:
            if n >= size:
                return sorted(iterable, key=key, reverse=True)[:n]

        if key is None:
            it = izip(iterable, count(0, -1))
            result = _nlargest(n, it)
            return map(itemgetter(0), result)
        in1, in2 = tee(iterable)
        it = izip(imap(key, in1), count(0, -1), in2)
        result = _nlargest(n, it)
        return map(itemgetter(2), result)


if __name__ == '__main__':
    heap = []
    data = [1,
     3,
     5,
     7,
     9,
     2,
     4,
     6,
     8,
     0]
    for item in data:
        heappush(heap, item)

    sort = []
    while heap:
        sort.append(heappop(heap))

    print sort
    import doctest
    doctest.testmod()