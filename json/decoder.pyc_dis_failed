# Fuck you Disyer. Stealing my fucking paypal. GET FUCKED: json.decoder
import re
import sys
import struct
from json import scanner
try:
    from _json import scanstring as c_scanstring
except ImportError:
    c_scanstring = None

__all__ = ['JSONDecoder']
FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL

def _floatconstants():
    _BYTES = '7FF80000000000007FF0000000000000'.decode('hex')
    if sys.byteorder != 'big':
        _BYTES = _BYTES[:8][::-1] + _BYTES[8:][::-1]
    nan, inf = struct.unpack('dd', _BYTES)
    return (nan, inf, -inf)


NaN, PosInf, NegInf = _floatconstants()

def linecol(doc, pos):
    lineno = doc.count('\n', 0, pos) + 1
    if lineno == 1:
        colno = pos + 1
    else:
        colno = pos - doc.rindex('\n', 0, pos)
    return (lineno, colno)


def errmsg(msg, doc, pos, end = None):
    lineno, colno = linecol(doc, pos)
    if end is None:
        fmt = '{0}: line {1} column {2} (char {3})'
        return fmt.format(msg, lineno, colno, pos)
    else:
        endlineno, endcolno = linecol(doc, end)
        fmt = '{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})'
        return fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)


_CONSTANTS = {'-Infinity': NegInf,
 'Infinity': PosInf,
 'NaN': NaN}
STRINGCHUNK = re.compile('(.*?)(["\\\\\\x00-\\x1f])', FLAGS)
BACKSLASH = {'"': u'"',
 '\\': u'\\',
 '/': u'/',
 'b': u'\x08',
 'f': u'\x0c',
 'n': u'\n',
 'r': u'\r',
 't': u'\t'}
DEFAULT_ENCODING = 'utf-8'

def _decode_uXXXX(s, pos):
    esc = s[pos + 1:pos + 5]
    if len(esc) == 4 and esc[1] not in 'xX':
        try:
            return int(esc, 16)
        except ValueError:
            pass

    msg = 'Invalid \\uXXXX escape'
    raise ValueError(errmsg(msg, s, pos))


def py_scanstring--- This code section failed: ---

0	LOAD_FAST         'encoding'
3	LOAD_CONST        None
6	COMPARE_OP        'is'
9	POP_JUMP_IF_FALSE '21'

12	LOAD_GLOBAL       'DEFAULT_ENCODING'
15	STORE_FAST        'encoding'
18	JUMP_FORWARD      '21'
21_0	COME_FROM         '18'

21	BUILD_LIST_0      None
24	STORE_FAST        'chunks'

27	LOAD_FAST         'chunks'
30	LOAD_ATTR         'append'
33	STORE_FAST        '_append'

36	LOAD_FAST         'end'
39	LOAD_CONST        1
42	BINARY_SUBTRACT   None
43	STORE_FAST        'begin'

46	SETUP_LOOP        '640'

49	LOAD_FAST         '_m'
52	LOAD_FAST         's'
55	LOAD_FAST         'end'
58	CALL_FUNCTION_2   None
61	STORE_FAST        'chunk'

64	LOAD_FAST         'chunk'
67	LOAD_CONST        None
70	COMPARE_OP        'is'
73	POP_JUMP_IF_FALSE '103'

76	LOAD_GLOBAL       'ValueError'

79	LOAD_GLOBAL       'errmsg'
82	LOAD_CONST        'Unterminated string starting at'
85	LOAD_FAST         's'
88	LOAD_FAST         'begin'
91	CALL_FUNCTION_3   None
94	CALL_FUNCTION_1   None
97	RAISE_VARARGS_1   None
100	JUMP_FORWARD      '103'
103_0	COME_FROM         '100'

103	LOAD_FAST         'chunk'
106	LOAD_ATTR         'end'
109	CALL_FUNCTION_0   None
112	STORE_FAST        'end'

115	LOAD_FAST         'chunk'
118	LOAD_ATTR         'groups'
121	CALL_FUNCTION_0   None
124	UNPACK_SEQUENCE_2 None
127	STORE_FAST        'content'
130	STORE_FAST        'terminator'

133	LOAD_FAST         'content'
136	POP_JUMP_IF_FALSE '185'

139	LOAD_GLOBAL       'isinstance'
142	LOAD_FAST         'content'
145	LOAD_GLOBAL       'unicode'
148	CALL_FUNCTION_2   None
151	POP_JUMP_IF_TRUE  '172'

154	LOAD_GLOBAL       'unicode'
157	LOAD_FAST         'content'
160	LOAD_FAST         'encoding'
163	CALL_FUNCTION_2   None
166	STORE_FAST        'content'
169	JUMP_FORWARD      '172'
172_0	COME_FROM         '169'

172	LOAD_FAST         '_append'
175	LOAD_FAST         'content'
178	CALL_FUNCTION_1   None
181	POP_TOP           None
182	JUMP_FORWARD      '185'
185_0	COME_FROM         '182'

185	LOAD_FAST         'terminator'
188	LOAD_CONST        '"'
191	COMPARE_OP        '=='
194	POP_JUMP_IF_FALSE '201'

197	BREAK_LOOP        None
198	JUMP_FORWARD      '277'

201	LOAD_FAST         'terminator'
204	LOAD_CONST        '\\'
207	COMPARE_OP        '!='
210	POP_JUMP_IF_FALSE '277'

213	LOAD_FAST         'strict'
216	POP_JUMP_IF_FALSE '261'

219	LOAD_CONST        'Invalid control character {0!r} at'
222	LOAD_ATTR         'format'
225	LOAD_FAST         'terminator'
228	CALL_FUNCTION_1   None
231	STORE_FAST        'msg'

234	LOAD_GLOBAL       'ValueError'
237	LOAD_GLOBAL       'errmsg'
240	LOAD_FAST         'msg'
243	LOAD_FAST         's'
246	LOAD_FAST         'end'
249	CALL_FUNCTION_3   None
252	CALL_FUNCTION_1   None
255	RAISE_VARARGS_1   None
258	JUMP_ABSOLUTE     '277'

261	LOAD_FAST         '_append'
264	LOAD_FAST         'terminator'
267	CALL_FUNCTION_1   None
270	POP_TOP           None

271	CONTINUE          '49'
274	JUMP_FORWARD      '277'
277_0	COME_FROM         '198'
277_1	COME_FROM         '274'

277	SETUP_EXCEPT      '294'

280	LOAD_FAST         's'
283	LOAD_FAST         'end'
286	BINARY_SUBSCR     None
287	STORE_FAST        'esc'
290	POP_BLOCK         None
291	JUMP_FORWARD      '335'
294_0	COME_FROM         '277'

294	DUP_TOP           None
295	LOAD_GLOBAL       'IndexError'
298	COMPARE_OP        'exception match'
301	POP_JUMP_IF_FALSE '334'
304	POP_TOP           None
305	POP_TOP           None
306	POP_TOP           None

307	LOAD_GLOBAL       'ValueError'

310	LOAD_GLOBAL       'errmsg'
313	LOAD_CONST        'Unterminated string starting at'
316	LOAD_FAST         's'
319	LOAD_FAST         'begin'
322	CALL_FUNCTION_3   None
325	CALL_FUNCTION_1   None
328	RAISE_VARARGS_1   None
331	JUMP_FORWARD      '335'
334	END_FINALLY       None
335_0	COME_FROM         '291'
335_1	COME_FROM         '334'

335	LOAD_FAST         'esc'
338	LOAD_CONST        'u'
341	COMPARE_OP        '!='
344	POP_JUMP_IF_FALSE '434'

347	SETUP_EXCEPT      '364'

350	LOAD_FAST         '_b'
353	LOAD_FAST         'esc'
356	BINARY_SUBSCR     None
357	STORE_FAST        'char'
360	POP_BLOCK         None
361	JUMP_FORWARD      '421'
364_0	COME_FROM         '347'

364	DUP_TOP           None
365	LOAD_GLOBAL       'KeyError'
368	COMPARE_OP        'exception match'
371	POP_JUMP_IF_FALSE '420'
374	POP_TOP           None
375	POP_TOP           None
376	POP_TOP           None

377	LOAD_CONST        'Invalid \\escape: '
380	LOAD_GLOBAL       'repr'
383	LOAD_FAST         'esc'
386	CALL_FUNCTION_1   None
389	BINARY_ADD        None
390	STORE_FAST        'msg'

393	LOAD_GLOBAL       'ValueError'
396	LOAD_GLOBAL       'errmsg'
399	LOAD_FAST         'msg'
402	LOAD_FAST         's'
405	LOAD_FAST         'end'
408	CALL_FUNCTION_3   None
411	CALL_FUNCTION_1   None
414	RAISE_VARARGS_1   None
417	JUMP_FORWARD      '421'
420	END_FINALLY       None
421_0	COME_FROM         '361'
421_1	COME_FROM         '420'

421	LOAD_FAST         'end'
424	LOAD_CONST        1
427	INPLACE_ADD       None
428	STORE_FAST        'end'
431	JUMP_FORWARD      '626'

434	LOAD_GLOBAL       '_decode_uXXXX'
437	LOAD_FAST         's'
440	LOAD_FAST         'end'
443	CALL_FUNCTION_2   None
446	STORE_FAST        'uni'

449	LOAD_FAST         'end'
452	LOAD_CONST        5
455	INPLACE_ADD       None
456	STORE_FAST        'end'

459	LOAD_GLOBAL       'sys'
462	LOAD_ATTR         'maxunicode'
465	LOAD_CONST        65535
468	COMPARE_OP        '>'
471	POP_JUMP_IF_FALSE '614'

474	LOAD_CONST        55296
477	LOAD_FAST         'uni'
480	DUP_TOP           None
481	ROT_THREE         None
482	COMPARE_OP        '<='
485	JUMP_IF_FALSE_OR_POP '497'
488	LOAD_CONST        56319
491	COMPARE_OP        '<='
494	JUMP_FORWARD      '499'
497_0	COME_FROM         '485'
497	ROT_TWO           None
498	POP_TOP           None
499_0	COME_FROM         '494'
499	POP_JUMP_IF_FALSE '614'
502	LOAD_FAST         's'
505	LOAD_FAST         'end'
508	LOAD_FAST         'end'
511	LOAD_CONST        2
514	BINARY_ADD        None
515	SLICE+3           None
516	LOAD_CONST        '\\u'
519	COMPARE_OP        '=='
522_0	COME_FROM         '471'
522_1	COME_FROM         '499'
522	POP_JUMP_IF_FALSE '614'

525	LOAD_GLOBAL       '_decode_uXXXX'
528	LOAD_FAST         's'
531	LOAD_FAST         'end'
534	LOAD_CONST        1
537	BINARY_ADD        None
538	CALL_FUNCTION_2   None
541	STORE_FAST        'uni2'

544	LOAD_CONST        56320
547	LOAD_FAST         'uni2'
550	DUP_TOP           None
551	ROT_THREE         None
552	COMPARE_OP        '<='
555	JUMP_IF_FALSE_OR_POP '567'
558	LOAD_CONST        57343
561	COMPARE_OP        '<='
564	JUMP_FORWARD      '569'
567_0	COME_FROM         '555'
567	ROT_TWO           None
568	POP_TOP           None
569_0	COME_FROM         '564'
569	POP_JUMP_IF_FALSE '614'

572	LOAD_CONST        65536
575	LOAD_FAST         'uni'
578	LOAD_CONST        55296
581	BINARY_SUBTRACT   None
582	LOAD_CONST        10
585	BINARY_LSHIFT     None
586	LOAD_FAST         'uni2'
589	LOAD_CONST        56320
592	BINARY_SUBTRACT   None
593	BINARY_OR         None
594	BINARY_ADD        None
595	STORE_FAST        'uni'

598	LOAD_FAST         'end'
601	LOAD_CONST        6
604	INPLACE_ADD       None
605	STORE_FAST        'end'
608	JUMP_ABSOLUTE     '614'
611	JUMP_FORWARD      '614'
614_0	COME_FROM         '611'

614	LOAD_GLOBAL       'unichr'
617	LOAD_FAST         'uni'
620	CALL_FUNCTION_1   None
623	STORE_FAST        'char'
626_0	COME_FROM         '431'

626	LOAD_FAST         '_append'
629	LOAD_FAST         'char'
632	CALL_FUNCTION_1   None
635	POP_TOP           None
636	JUMP_BACK         '49'
639	POP_BLOCK         None
640_0	COME_FROM         '46'

640	LOAD_CONST        u''
643	LOAD_ATTR         'join'
646	LOAD_FAST         'chunks'
649	CALL_FUNCTION_1   None
652	LOAD_FAST         'end'
655	BUILD_TUPLE_2     None
658	RETURN_VALUE      None

Syntax error at or near `POP_BLOCK' token at offset 639


scanstring = c_scanstring or py_scanstring
WHITESPACE = re.compile('[ \\t\\n\\r]*', FLAGS)
WHITESPACE_STR = ' \t\n\r'

def JSONObject(s_and_end, encoding, strict, scan_once, object_hook, object_pairs_hook, _w = WHITESPACE.match, _ws = WHITESPACE_STR):
    s, end = s_and_end
    pairs = []
    pairs_append = pairs.append
    nextchar = s[end:end + 1]
    if nextchar != '"':
        if nextchar in _ws:
            end = _w(s, end).end()
            nextchar = s[end:end + 1]
        if nextchar == '}':
            if object_pairs_hook is not None:
                result = object_pairs_hook(pairs)
                return (result, end + 1)
            pairs = {}
            if object_hook is not None:
                pairs = object_hook(pairs)
            return (pairs, end + 1)
        if nextchar != '"':
            raise ValueError(errmsg('Expecting property name enclosed in double quotes', s, end))
    end += 1
    while True:
        key, end = scanstring(s, end, encoding, strict)
        if s[end:end + 1] != ':':
            end = _w(s, end).end()
            if s[end:end + 1] != ':':
                raise ValueError(errmsg("Expecting ':' delimiter", s, end))
        end += 1
        try:
            if s[end] in _ws:
                end += 1
                if s[end] in _ws:
                    end = _w(s, end + 1).end()
        except IndexError:
            pass

        try:
            value, end = scan_once(s, end)
        except StopIteration:
            raise ValueError(errmsg('Expecting object', s, end))

        pairs_append((key, value))
        try:
            nextchar = s[end]
            if nextchar in _ws:
                end = _w(s, end + 1).end()
                nextchar = s[end]
        except IndexError:
            nextchar = ''

        end += 1
        if nextchar == '}':
            break
        elif nextchar != ',':
            raise ValueError(errmsg("Expecting ',' delimiter", s, end - 1))
        try:
            nextchar = s[end]
            if nextchar in _ws:
                end += 1
                nextchar = s[end]
                if nextchar in _ws:
                    end = _w(s, end + 1).end()
                    nextchar = s[end]
        except IndexError:
            nextchar = ''

        end += 1
        if nextchar != '"':
            raise ValueError(errmsg('Expecting property name enclosed in double quotes', s, end - 1))

    if object_pairs_hook is not None:
        result = object_pairs_hook(pairs)
        return (result, end)
    else:
        pairs = dict(pairs)
        if object_hook is not None:
            pairs = object_hook(pairs)
        return (pairs, end)


def JSONArray(s_and_end, scan_once, _w = WHITESPACE.match, _ws = WHITESPACE_STR):
    s, end = s_and_end
    values = []
    nextchar = s[end:end + 1]
    if nextchar in _ws:
        end = _w(s, end + 1).end()
        nextchar = s[end:end + 1]
    if nextchar == ']':
        return (values, end + 1)
    _append = values.append
    while True:
        try:
            value, end = scan_once(s, end)
        except StopIteration:
            raise ValueError(errmsg('Expecting object', s, end))

        _append(value)
        nextchar = s[end:end + 1]
        if nextchar in _ws:
            end = _w(s, end + 1).end()
            nextchar = s[end:end + 1]
        end += 1
        if nextchar == ']':
            break
        elif nextchar != ',':
            raise ValueError(errmsg("Expecting ',' delimiter", s, end))
        try:
            if s[end] in _ws:
                end += 1
                if s[end] in _ws:
                    end = _w(s, end + 1).end()
        except IndexError:
            pass

    return (values, end)


class JSONDecoder(object):

    def __init__(self, encoding = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, strict = True, object_pairs_hook = None):
        self.encoding = encoding
        self.object_hook = object_hook
        self.object_pairs_hook = object_pairs_hook
        self.parse_float = parse_float or float
        self.parse_int = parse_int or int
        self.parse_constant = parse_constant or _CONSTANTS.__getitem__
        self.strict = strict
        self.parse_object = JSONObject
        self.parse_array = JSONArray
        self.parse_string = scanstring
        self.scan_once = scanner.make_scanner(self)

    def decode(self, s, _w = WHITESPACE.match):
        obj, end = self.raw_decode(s, idx=_w(s, 0).end())
        end = _w(s, end).end()
        if end != len(s):
            raise ValueError(errmsg('Extra data', s, end, len(s)))
        return obj

    def raw_decode(self, s, idx = 0):
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration:
            raise ValueError('No JSON object could be decoded')

        return (obj, end)