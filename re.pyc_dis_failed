# Fuck you Disyer. Stealing my fucking paypal. GET FUCKED: re
import sys
import sre_compile
import sre_parse
try:
    import _locale
except ImportError:
    _locale = None

__all__ = ['match',
 'search',
 'sub',
 'subn',
 'split',
 'findall',
 'compile',
 'purge',
 'template',
 'escape',
 'I',
 'L',
 'M',
 'S',
 'X',
 'U',
 'IGNORECASE',
 'LOCALE',
 'MULTILINE',
 'DOTALL',
 'VERBOSE',
 'UNICODE',
 'error']
__version__ = '2.2.1'
I = IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE
L = LOCALE = sre_compile.SRE_FLAG_LOCALE
U = UNICODE = sre_compile.SRE_FLAG_UNICODE
M = MULTILINE = sre_compile.SRE_FLAG_MULTILINE
S = DOTALL = sre_compile.SRE_FLAG_DOTALL
X = VERBOSE = sre_compile.SRE_FLAG_VERBOSE
T = TEMPLATE = sre_compile.SRE_FLAG_TEMPLATE
DEBUG = sre_compile.SRE_FLAG_DEBUG
error = sre_compile.error

def match(pattern, string, flags = 0):
    return _compile(pattern, flags).match(string)


def search(pattern, string, flags = 0):
    return _compile(pattern, flags).search(string)


def sub(pattern, repl, string, count = 0, flags = 0):
    return _compile(pattern, flags).sub(repl, string, count)


def subn(pattern, repl, string, count = 0, flags = 0):
    return _compile(pattern, flags).subn(repl, string, count)


def split(pattern, string, maxsplit = 0, flags = 0):
    return _compile(pattern, flags).split(string, maxsplit)


def findall(pattern, string, flags = 0):
    return _compile(pattern, flags).findall(string)


if sys.hexversion >= 33685504:
    __all__.append('finditer')

    def finditer(pattern, string, flags = 0):
        return _compile(pattern, flags).finditer(string)


def compile(pattern, flags = 0):
    return _compile(pattern, flags)


def purge():
    _cache.clear()
    _cache_repl.clear()


def template(pattern, flags = 0):
    return _compile(pattern, flags | T)


_alphanum = frozenset('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')

def escape(pattern):
    s = list(pattern)
    alphanum = _alphanum
    for i, c in enumerate(pattern):
        if c not in alphanum:
            if c == '\x00':
                s[i] = '\\000'
            else:
                s[i] = '\\' + c

    return pattern[:0].join(s)


_cache = {}
_cache_repl = {}
_pattern_type = type(sre_compile.compile('', 0))
_MAXCACHE = 100

def _compile(*key):
    pattern, flags = key
    bypass_cache = flags & DEBUG
    if not bypass_cache:
        cachekey = (type(key[0]),) + key
        try:
            p, loc = _cache[cachekey]
            if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
                return p
        except KeyError:
            pass

    if isinstance(pattern, _pattern_type):
        if flags:
            raise ValueError('Cannot process flags argument with a compiled pattern')
        return pattern
    else:
        if not sre_compile.isstring(pattern):
            raise TypeError, 'first argument must be string or compiled pattern'
        try:
            p = sre_compile.compile(pattern, flags)
        except error as v:
            raise error, v

        if not bypass_cache:
            if len(_cache) >= _MAXCACHE:
                _cache.clear()
            if p.flags & LOCALE:
                if not _locale:
                    return p
                loc = _locale.setlocale(_locale.LC_CTYPE)
            else:
                loc = None
            _cache[cachekey] = (p, loc)
        return p


def _compile_repl(*key):
    p = _cache_repl.get(key)
    if p is not None:
        return p
    else:
        repl, pattern = key
        try:
            p = sre_parse.parse_template(repl, pattern)
        except error as v:
            raise error, v

        if len(_cache_repl) >= _MAXCACHE:
            _cache_repl.clear()
        _cache_repl[key] = p
        return p


def _expand(pattern, match, template):
    template = sre_parse.parse_template(template, pattern)
    return sre_parse.expand_template(template, match)


def _subx(pattern, template):
    template = _compile_repl(template, pattern)
    if not template[0] and len(template[1]) == 1:
        return template[1][0]

    def filter(match, template = template):
        return sre_parse.expand_template(template, match)

    return filter


import copy_reg

def _pickle(p):
    return (_compile, (p.pattern, p.flags))


copy_reg.pickle(_pattern_type, _pickle, _compile)

class Scanner:

    def __init__(self, lexicon, flags = 0):
        from sre_constants import BRANCH, SUBPATTERN
        self.lexicon = lexicon
        p = []
        s = sre_parse.Pattern()
        s.flags = flags
        for phrase, action in lexicon:
            p.append(sre_parse.SubPattern(s, [(SUBPATTERN, (len(p) + 1, sre_parse.parse(phrase, flags)))]))

        s.groups = len(p) + 1
        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])
        self.scanner = sre_compile.compile(p)
        return

    def scan--- This code section failed: ---

0	BUILD_LIST_0      None
3	STORE_FAST        'result'

6	LOAD_FAST         'result'
9	LOAD_ATTR         'append'
12	STORE_FAST        'append'

15	LOAD_FAST         'self'
18	LOAD_ATTR         'scanner'
21	LOAD_ATTR         'scanner'
24	LOAD_FAST         'string'
27	CALL_FUNCTION_1   None
30	LOAD_ATTR         'match'
33	STORE_FAST        'match'

36	LOAD_CONST        0
39	STORE_FAST        'i'

42	SETUP_LOOP        '199'

45	LOAD_FAST         'match'
48	CALL_FUNCTION_0   None
51	STORE_FAST        'm'

54	LOAD_FAST         'm'
57	POP_JUMP_IF_TRUE  '64'

60	BREAK_LOOP        None
61	JUMP_FORWARD      '64'
64_0	COME_FROM         '61'

64	LOAD_FAST         'm'
67	LOAD_ATTR         'end'
70	CALL_FUNCTION_0   None
73	STORE_FAST        'j'

76	LOAD_FAST         'i'
79	LOAD_FAST         'j'
82	COMPARE_OP        '=='
85	POP_JUMP_IF_FALSE '92'

88	BREAK_LOOP        None
89	JUMP_FORWARD      '92'
92_0	COME_FROM         '89'

92	LOAD_FAST         'self'
95	LOAD_ATTR         'lexicon'
98	LOAD_FAST         'm'
101	LOAD_ATTR         'lastindex'
104	LOAD_CONST        1
107	BINARY_SUBTRACT   None
108	BINARY_SUBSCR     None
109	LOAD_CONST        1
112	BINARY_SUBSCR     None
113	STORE_FAST        'action'

116	LOAD_GLOBAL       'hasattr'
119	LOAD_FAST         'action'
122	LOAD_CONST        '__call__'
125	CALL_FUNCTION_2   None
128	POP_JUMP_IF_FALSE '164'

131	LOAD_FAST         'm'
134	LOAD_FAST         'self'
137	STORE_ATTR        'match'

140	LOAD_FAST         'action'
143	LOAD_FAST         'self'
146	LOAD_FAST         'm'
149	LOAD_ATTR         'group'
152	CALL_FUNCTION_0   None
155	CALL_FUNCTION_2   None
158	STORE_FAST        'action'
161	JUMP_FORWARD      '164'
164_0	COME_FROM         '161'

164	LOAD_FAST         'action'
167	LOAD_CONST        None
170	COMPARE_OP        'is not'
173	POP_JUMP_IF_FALSE '189'

176	LOAD_FAST         'append'
179	LOAD_FAST         'action'
182	CALL_FUNCTION_1   None
185	POP_TOP           None
186	JUMP_FORWARD      '189'
189_0	COME_FROM         '186'

189	LOAD_FAST         'j'
192	STORE_FAST        'i'
195	JUMP_BACK         '45'
198	POP_BLOCK         None
199_0	COME_FROM         '42'

199	LOAD_FAST         'result'
202	LOAD_FAST         'string'
205	LOAD_FAST         'i'
208	SLICE+1           None
209	BUILD_TUPLE_2     None
212	RETURN_VALUE      None

Syntax error at or near `POP_BLOCK' token at offset 198